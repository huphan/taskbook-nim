/* Generated by the Nim Compiler v0.19.2 */
/*   (c) 2018 Andreas Rumpf */

var framePtr = null;
var excHandler = 0;
var lastJSError = null;
if (typeof Int8Array === 'undefined') Int8Array = Array;
if (typeof Int16Array === 'undefined') Int16Array = Array;
if (typeof Int32Array === 'undefined') Int32Array = Array;
if (typeof Uint8Array === 'undefined') Uint8Array = Array;
if (typeof Uint16Array === 'undefined') Uint16Array = Array;
if (typeof Uint32Array === 'undefined') Uint32Array = Array;
if (typeof Float32Array === 'undefined') Float32Array = Array;
if (typeof Float64Array === 'undefined') Float64Array = Array;
var NTI156039 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI158202 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI3858 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3862 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3842 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3846 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI104 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI15346 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI3808 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3918 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI114 = {size: 0,kind: 40,base: null,node: null,finalizer: null};
var NTI140 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI3912 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI3826 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3828 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3852 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI138 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NNI3852 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3852.node = NNI3852;
var NNI3828 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3828.node = NNI3828;
NTI3912.base = NTI3826;
NTI3918.base = NTI3826;
var NNI3826 = {kind: 2, len: 6, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI3912, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI140, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI138, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI138, name: "trace", sons: null}, 
{kind: 1, offset: "raise_id", len: 0, typ: NTI114, name: "raise_id", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI3918, name: "up", sons: null}]};
NTI3826.node = NNI3826;
var NNI3808 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3808.node = NNI3808;
NTI3826.base = NTI3808;
NTI3828.base = NTI3826;
NTI3852.base = NTI3828;
var NNI15346 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI140, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI104, name: "Field1", sons: null}]};
NTI15346.node = NNI15346;
var NNI3846 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3846.node = NNI3846;
var NNI3842 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3842.node = NNI3842;
NTI3842.base = NTI3828;
NTI3846.base = NTI3842;
var NNI3862 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3862.node = NNI3862;
NTI3862.base = NTI3828;
var NNI3858 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3858.node = NNI3858;
NTI3858.base = NTI3828;
var NNI158202 = {kind: 2, offset: 0, typ: null, name: null, len: 7, sons: {"0": {kind: 1, offset: 0, typ: NTI158202, name: "JNull", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI158202, name: "JBool", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI158202, name: "JInt", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI158202, name: "JFloat", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI158202, name: "JString", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI158202, name: "JObject", len: 0, sons: null}, 
"6": {kind: 1, offset: 6, typ: NTI158202, name: "JArray", len: 0, sons: null}}};
NTI158202.node = NNI158202;
var NNI156039 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI156039.node = NNI156039;
NTI156039.base = NTI3852;

function toJSStr(s_16259) {
		  if (s_16259 === null) return "";
  var len = s_16259.length;
  var asciiPart = new Array(len);
  var fcc = String.fromCharCode;
  var nonAsciiPart = null;
  var nonAsciiOffset = 0;
  for (var i = 0; i < len; ++i) {
    if (nonAsciiPart !== null) {
      var offset = (i - nonAsciiOffset) * 2;
      var code = s_16259[i].toString(16);
      if (code.length == 1) {
        code = "0"+code;
      }
      nonAsciiPart[offset] = "%";
      nonAsciiPart[offset + 1] = code;
    }
    else if (s_16259[i] < 128)
      asciiPart[i] = fcc(s_16259[i]);
    else {
      asciiPart.length = i;
      nonAsciiOffset = i;
      nonAsciiPart = new Array((len - i) * 2);
      --i;
    }
  }
  asciiPart = asciiPart.join("");
  return (nonAsciiPart === null) ?
      asciiPart : asciiPart + decodeURIComponent(nonAsciiPart.join(""));
  

	
}

function rawEcho() {
		      var buf = "";
      for (var i = 0; i < arguments.length; ++i) {
        buf += toJSStr(arguments[i]);
      }
      console.log(buf);
    

	
}

function cstrToNimstr(c_16242) {
		  var ln = c_16242.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_16242.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_16242.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  return result;
  

	
}

function setConstr() {
		    var result = {};
    for (var i = 0; i < arguments.length; ++i) {
      var x = arguments[i];
      if (typeof(x) == "object") {
        for (var j = x[0]; j <= x[1]; ++j) {
          result[j] = true;
        }
      } else {
        result[x] = true;
      }
    }
    return result;
  

	
}
var ConstSet1 = setConstr(2);

function mnewString(len_16276) {
		    return new Array(len_16276);
  

	
}
var ConstSet2 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);

function nimCopy(dest_17230, src_17231, ti_17232) {
	var result_17655 = null;

		switch (ti_17232.kind) {
		case 21:
		case 22:
		case 23:
		case 5:
			if (!(is_fat_pointer_17201(ti_17232))) {
			result_17655 = src_17231;
			}
			else {
				result_17655 = [src_17231[0], src_17231[1]];
			}
			
			break;
		case 19:
			      if (dest_17230 === null || dest_17230 === undefined) {
        dest_17230 = {};
      }
      else {
        for (var key in dest_17230) { delete dest_17230[key]; }
      }
      for (var key in src_17231) { dest_17230[key] = src_17231[key]; }
      result_17655 = dest_17230;
    
			break;
		case 18:
		case 17:
			if (!((ti_17232.base == null))) {
			result_17655 = nimCopy(dest_17230, src_17231, ti_17232.base);
			}
			else {
			if ((ti_17232.kind == 17)) {
			result_17655 = (dest_17230 === null || dest_17230 === undefined) ? {m_type: ti_17232} : dest_17230;
			}
			else {
				result_17655 = (dest_17230 === null || dest_17230 === undefined) ? {} : dest_17230;
			}
			}
			nimCopyAux(result_17655, src_17231, ti_17232.node);
			break;
		case 24:
		case 4:
		case 27:
		case 16:
			      if (src_17231 === null) {
        result_17655 = null;
      }
      else {
        if (dest_17230 === null || dest_17230 === undefined) {
          dest_17230 = new Array(src_17231.length);
        }
        else {
          dest_17230.length = src_17231.length;
        }
        result_17655 = dest_17230;
        for (var i = 0; i < src_17231.length; ++i) {
          result_17655[i] = nimCopy(result_17655[i], src_17231[i], ti_17232.base);
        }
      }
    
			break;
		case 28:
			      if (src_17231 !== null) {
        result_17655 = src_17231.slice(0);
      }
    
			break;
		default: 
			result_17655 = src_17231;
			break;
		}

	return result_17655;

}

function makeNimstrLit(c_16225) {
		  var ln = c_16225.length;
  var result = new Array(ln);
  for (var i = 0; i < ln; ++i) {
    result[i] = c_16225.charCodeAt(i);
  }
  return result;
  

	
}

function arrayConstr(len_17716, value_17717, typ_17718) {
		    var result = new Array(len_17716);
    for (var i = 0; i < len_17716; ++i) result[i] = nimCopy(null, value_17717, typ_17718);
    return result;
  

	
}

function raiseException(e_15818, ename_15819) {
		e_15818.name = ename_15819;
		if ((excHandler == 0)) {
		unhandledException(e_15818);
		}
		
		e_15818.trace = nimCopy(null, raw_write_stack_trace_15655(), NTI138);
		throw e_15818;

	
}

function addChar(x_17889, c_17890) {
		x_17889.push(c_17890);

	
}
var ConstSet3 = setConstr([48, 57]);
var ConstSet4 = setConstr(0, 125);
var ConstSet5 = setConstr([48, 57]);
var ConstSet6 = setConstr([65, 90]);

function addInt(a_16603, b_16604) {
		    var result = a_16603 + b_16604;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

	
}

function chckRange(i_17754, a_17755, b_17756) {
			var Tmp1;

	var result_17757 = 0;

	BeforeRet: do {
			if (!(a_17755 <= i_17754)) Tmp1 = false; else {				Tmp1 = (i_17754 <= b_17756);			}		if (Tmp1) {
		result_17757 = i_17754;
		break BeforeRet;
		}
		else {
		raiseRangeError();
		}
		
	} while (false);

	return result_17757;

}

function nimMax(a_16958, b_16959) {
		var Tmp1;

	var result_16960 = 0;

	BeforeRet: do {
		if ((b_16959 <= a_16958)) {
		Tmp1 = a_16958;
		}
		else {
		Tmp1 = b_16959;
		}
		
		result_16960 = Tmp1;
		break BeforeRet;
	} while (false);

	return result_16960;

}

function subInt(a_16621, b_16622) {
		    var result = a_16621 - b_16622;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

	
}

function nimMin(a_16940, b_16941) {
		var Tmp1;

	var result_16942 = 0;

	BeforeRet: do {
		if ((a_16940 <= b_16941)) {
		Tmp1 = a_16940;
		}
		else {
		Tmp1 = b_16941;
		}
		
		result_16942 = Tmp1;
		break BeforeRet;
	} while (false);

	return result_16942;

}

function chckIndx(i_17735, a_17736, b_17737) {
			var Tmp1;

	var result_17738 = 0;

	BeforeRet: do {
			if (!(a_17736 <= i_17735)) Tmp1 = false; else {				Tmp1 = (i_17735 <= b_17737);			}		if (Tmp1) {
		result_17738 = i_17735;
		break BeforeRet;
		}
		else {
		raiseIndexError();
		}
		
	} while (false);

	return result_17738;

}
var ConstSet7 = setConstr([97, 122], [65, 90], [48, 57], [128, 255], 95);

function reprEnum(e_18481, typ_18482) {
	var result_18483 = null;

	var F={procname:"system.reprEnum",prev:framePtr,filename:"..\\..\\Software\\nim\\lib\\system\\reprjs.nim",line:0};
	framePtr = F;
		if (!(is_undefined_18485(typ_18482.node.sons[e_18481]))) {
		F.line = 38;
		result_18483 = nimCopy(null, makeNimstrLit(typ_18482.node.sons[e_18481].name), NTI138);
		}
		else {
			F.line = 40;
			result_18483 = nimCopy(null, (cstrToNimstr((e_18481)+"")).concat(makeNimstrLit(" (invalid data!)")), NTI138);
		}
		
	framePtr = F.prev;

	return result_18483;

}
var ConstSet8 = setConstr(2);
var nimvm_7173 = false;
var nim_program_result = 0;
var global_raise_hook_13418 = [null];
var local_raise_hook_13423 = [null];
var out_of_mem_hook_13426 = [null];
  if (!Math.trunc) {
    Math.trunc = function(v) {
      v = +v;
      if (!isFinite(v)) return v;

      return (v - v % 1)   ||   (v < 0 ? -0 : v === 0 ? v : 0);
    };
  }
var object_id_141246 = [0];

function new_jint_158321(n_158323) {
	var result_158324 = null;

	var F={procname:"json.newJInt",prev:framePtr,filename:"..\\..\\Software\\nim\\lib\\pure\\json.nim",line:0};
	framePtr = F;
		F.line = 194;
		result_158324 = {kind: 0, str: null, num: 0, fnum: 0.0, bval: false, fields: {data: null, counter: 0, first: 0, last: 0}, elems: null};
		F.line = 195;
		result_158324.kind = 2;
		F.line = 196;
		result_158324.num = n_158323;
	framePtr = F.prev;

	return result_158324;

}

function is_fat_pointer_17201(ti_17203) {
	var result_17204 = false;

	BeforeRet: do {
		result_17204 = !((ConstSet2[ti_17203.base.kind] != undefined));
		break BeforeRet;
	} while (false);

	return result_17204;

}

function nimCopyAux(dest_17235, src_17236, n_17238) {
		switch (n_17238.kind) {
		case 0:
			break;
		case 1:
			      dest_17235[n_17238.offset] = nimCopy(dest_17235[n_17238.offset], src_17236[n_17238.offset], n_17238.typ);
    
			break;
		case 2:
			L1: do {
				var i_17628 = 0;
				var colontmp__17630 = 0;
				colontmp__17630 = (n_17238.len - 1);
				var res_17633 = 0;
				L2: do {
						L3: while (true) {
						if (!(res_17633 <= colontmp__17630)) break L3;
							i_17628 = res_17633;
							nimCopyAux(dest_17235, src_17236, n_17238.sons[i_17628]);
							res_17633 += 1;
						}
				} while(false);
			} while(false);
			break;
		case 3:
			      dest_17235[n_17238.offset] = nimCopy(dest_17235[n_17238.offset], src_17236[n_17238.offset], n_17238.typ);
      for (var i = 0; i < n_17238.sons.length; ++i) {
        nimCopyAux(dest_17235, src_17236, n_17238.sons[i][1]);
      }
    
			break;
		}

	
}

function add_13438(x_13441, x_13441_Idx, y_13442) {
		      if (x_13441[x_13441_Idx] === null) { x_13441[x_13441_Idx] = []; }
      var off = x_13441[x_13441_Idx].length;
      x_13441[x_13441_Idx].length += y_13442.length;
      for (var i = 0; i < y_13442.length; ++i) {
        x_13441[x_13441_Idx][off+i] = y_13442.charCodeAt(i);
      }
    

	
}

function aux_write_stack_trace_15341(f_15343) {
					var Tmp3;

	var result_15344 = [null];

		var it_15352 = f_15343;
		var i_15354 = 0;
		var total_15356 = 0;
		var temp_frames_15363 = arrayConstr(64, {Field0: null, Field1: 0}, NTI15346);
		L1: do {
				L2: while (true) {
					if (!!((it_15352 == null))) Tmp3 = false; else {						Tmp3 = (i_15354 <= 63);					}				if (!Tmp3) break L2;
					temp_frames_15363[i_15354].Field0 = it_15352.procname;
					temp_frames_15363[i_15354].Field1 = it_15352.line;
					i_15354 += 1;
					total_15356 += 1;
					it_15352 = it_15352.prev;
				}
		} while(false);
		L4: do {
				L5: while (true) {
				if (!!((it_15352 == null))) break L5;
					total_15356 += 1;
					it_15352 = it_15352.prev;
				}
		} while(false);
		result_15344[0] = nimCopy(null, [], NTI138);
		if (!((total_15356 == i_15354))) {
		if (result_15344[0] != null) { result_15344[0] = (result_15344[0]).concat(makeNimstrLit("(")); } else { result_15344[0] = makeNimstrLit("("); };
		if (result_15344[0] != null) { result_15344[0] = (result_15344[0]).concat(cstrToNimstr(((total_15356 - i_15354))+"")); } else { result_15344[0] = cstrToNimstr(((total_15356 - i_15354))+"").slice(); };
		if (result_15344[0] != null) { result_15344[0] = (result_15344[0]).concat(makeNimstrLit(" calls omitted) ...\x0A")); } else { result_15344[0] = makeNimstrLit(" calls omitted) ...\x0A"); };
		}
		
		L6: do {
			var j_15628 = 0;
			var colontmp__15635 = 0;
			colontmp__15635 = (i_15354 - 1);
			var res_15638 = colontmp__15635;
			L7: do {
					L8: while (true) {
					if (!(0 <= res_15638)) break L8;
						j_15628 = res_15638;
						add_13438(result_15344, 0, temp_frames_15363[j_15628].Field0);
						if ((0 < temp_frames_15363[j_15628].Field1)) {
						if (result_15344[0] != null) { result_15344[0] = (result_15344[0]).concat(makeNimstrLit(", line: ")); } else { result_15344[0] = makeNimstrLit(", line: "); };
						if (result_15344[0] != null) { result_15344[0] = (result_15344[0]).concat(cstrToNimstr((temp_frames_15363[j_15628].Field1)+"")); } else { result_15344[0] = cstrToNimstr((temp_frames_15363[j_15628].Field1)+"").slice(); };
						}
						
						if (result_15344[0] != null) { result_15344[0] = (result_15344[0]).concat(makeNimstrLit("\x0A")); } else { result_15344[0] = makeNimstrLit("\x0A"); };
						res_15638 -= 1;
					}
			} while(false);
		} while(false);

	return result_15344[0];

}

function raw_write_stack_trace_15655() {
	var result_15657 = null;

		if (!((framePtr == null))) {
		result_15657 = nimCopy(null, (makeNimstrLit("Traceback (most recent call last)\x0A")).concat(aux_write_stack_trace_15341(framePtr)), NTI138);
		}
		else {
			result_15657 = nimCopy(null, makeNimstrLit("No stack traceback available\x0A"), NTI138);
		}
		

	return result_15657;

}

function unhandledException(e_15719) {
		var buf_15720 = [[]];
		if (!(((e_15719.message != null ? e_15719.message.length : 0) == 0))) {
		if (buf_15720[0] != null) { buf_15720[0] = (buf_15720[0]).concat(makeNimstrLit("Error: unhandled exception: ")); } else { buf_15720[0] = makeNimstrLit("Error: unhandled exception: "); };
		if (buf_15720[0] != null) { buf_15720[0] = (buf_15720[0]).concat(e_15719.message); } else { buf_15720[0] = e_15719.message.slice(); };
		}
		else {
		if (buf_15720[0] != null) { buf_15720[0] = (buf_15720[0]).concat(makeNimstrLit("Error: unhandled exception")); } else { buf_15720[0] = makeNimstrLit("Error: unhandled exception"); };
		}
		
		if (buf_15720[0] != null) { buf_15720[0] = (buf_15720[0]).concat(makeNimstrLit(" [")); } else { buf_15720[0] = makeNimstrLit(" ["); };
		add_13438(buf_15720, 0, e_15719.name);
		if (buf_15720[0] != null) { buf_15720[0] = (buf_15720[0]).concat(makeNimstrLit("]\x0A")); } else { buf_15720[0] = makeNimstrLit("]\x0A"); };
		if (buf_15720[0] != null) { buf_15720[0] = (buf_15720[0]).concat(raw_write_stack_trace_15655()); } else { buf_15720[0] = raw_write_stack_trace_15655().slice(); };
		var cbuf_15801 = toJSStr(buf_15720[0]);
		framePtr = null;
		  if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_15801);
  }
  else {
    throw cbuf_15801;
  }
  

	
}

function invalid_format_string_140000() {
		var e_140008 = null;
		e_140008 = {m_type: NTI3852, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		e_140008.message = nimCopy(null, makeNimstrLit("invalid format string"), NTI138);
		e_140008.parent = null;
		raiseException(e_140008, "ValueError");

	
}

function raiseOverflow() {
		var e_16065 = null;
		e_16065 = {m_type: NTI3846, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		e_16065.message = nimCopy(null, makeNimstrLit("over- or underflow"), NTI138);
		e_16065.parent = null;
		raiseException(e_16065, "OverflowError");

	
}

function raiseRangeError() {
		var e_16125 = null;
		e_16125 = {m_type: NTI3862, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		e_16125.message = nimCopy(null, makeNimstrLit("value out of range"), NTI138);
		e_16125.parent = null;
		raiseException(e_16125, "RangeError");

	
}

function nsuToLowerAsciiChar(c_132213) {
	var result_132214 = 0;

	var F={procname:"strutils.toLowerAscii",prev:framePtr,filename:"..\\..\\Software\\nim\\lib\\pure\\strutils.nim",line:0};
	framePtr = F;
		if ((ConstSet6[c_132213] != undefined)) {
		F.line = 259;
		result_132214 = chckRange(addInt(c_132213, 32), 0, 255);
		}
		else {
			F.line = 261;
			result_132214 = c_132213;
		}
		
	framePtr = F.prev;

	return result_132214;

}

function nsuCmpIgnoreStyle(a_132561, b_132562) {
					var Tmp7;
					var Tmp8;

	var result_132563 = 0;

	BeforeRet: do {
		var i_132565 = 0;
		var j_132567 = 0;
		L1: do {
				L2: while (true) {
				if (!true) break L2;
					L3: do {
							L4: while (true) {
							if (!((i_132565 < (a_132561 != null ? a_132561.length : 0)) && (a_132561[i_132565] == 95))) break L4;
								i_132565 += 1;
							}
					} while(false);
					L5: do {
							L6: while (true) {
							if (!((j_132567 < (b_132562 != null ? b_132562.length : 0)) && (b_132562[j_132567] == 95))) break L6;
								j_132567 += 1;
							}
					} while(false);
					if ((i_132565 < (a_132561 != null ? a_132561.length : 0))) {
					Tmp7 = nsuToLowerAsciiChar(a_132561[i_132565]);
					}
					else {
					Tmp7 = 0;
					}
					
					var aa_132586 = Tmp7;
					if ((j_132567 < (b_132562 != null ? b_132562.length : 0))) {
					Tmp8 = nsuToLowerAsciiChar(b_132562[j_132567]);
					}
					else {
					Tmp8 = 0;
					}
					
					var bb_132587 = Tmp8;
					result_132563 = (aa_132586 - bb_132587);
					if (!((result_132563 == 0))) {
					break BeforeRet;
					}
					
					if (((a_132561 != null ? a_132561.length : 0) <= i_132565)) {
					if (((b_132562 != null ? b_132562.length : 0) <= j_132567)) {
					result_132563 = 0;
					break BeforeRet;
					}
					
					result_132563 = -1;
					break BeforeRet;
					}
					else {
					if (((b_132562 != null ? b_132562.length : 0) <= j_132567)) {
					result_132563 = 1;
					break BeforeRet;
					}
					}
					i_132565 += 1;
					j_132567 += 1;
				}
		} while(false);
	} while (false);

	return result_132563;

}

function find_normalized_139961(x_139963, in_array_139965) {
	var result_139966 = 0;

	BeforeRet: do {
		var i_139968 = 0;
		L1: do {
				L2: while (true) {
				if (!(i_139968 < (in_array_139965 != null ? (in_array_139965.length-1) : -1))) break L2;
					if ((nsuCmpIgnoreStyle(x_139963, in_array_139965[i_139968]) == 0)) {
					result_139966 = i_139968;
					break BeforeRet;
					}
					
					i_139968 += 2;
				}
		} while(false);
		result_139966 = -1;
		break BeforeRet;
	} while (false);

	return result_139966;

}

function raiseIndexError() {
		var e_16155 = null;
		e_16155 = {m_type: NTI3858, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		e_16155.message = nimCopy(null, makeNimstrLit("index out of bounds"), NTI138);
		e_16155.parent = null;
		raiseException(e_16155, "IndexError");

	
}

function substr_23422(s_23424, first_23425, last_23426) {
	var result_23427 = null;

	var F={procname:"system.substr",prev:framePtr,filename:"..\\..\\Software\\nim\\lib\\system.nim",line:0};
	framePtr = F;
		F.line = 4259;
		var first_23428 = nimMax(first_23425, 0);
		F.line = 4260;
		var l_23430 = nimMax(addInt(subInt(nimMin(last_23426, (s_23424 != null ? (s_23424.length-1) : -1)), first_23428), 1), 0);
		F.line = 4261;
		result_23427 = nimCopy(null, mnewString(chckRange(l_23430, 0, 2147483647)), NTI138);
		L1: do {
			F.line = 4262;
			var i_23442 = 0;
			F.line = 2102;
			var colontmp__23444 = 0;
			F.line = 4262;
			colontmp__23444 = subInt(l_23430, 1);
			F.line = 2105;
			var res_23447 = 0;
			L2: do {
				F.line = 2106;
					L3: while (true) {
					if (!(res_23447 <= colontmp__23444)) break L3;
						F.line = 2107;
						i_23442 = res_23447;
						F.line = 4263;
						result_23427[chckIndx(i_23442, 0, result_23427.length+0-1)-0] = s_23424[chckIndx(addInt(i_23442, first_23428), 0, s_23424.length+0-1)-0];
						F.line = 2108;
						res_23447 = addInt(res_23447, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_23427;

}

function nsuAddf(s_140033, s_140033_Idx, formatstr_140034, a_140036) {
									var Tmp5;
						var Tmp6;
							var Tmp7;
						var Tmp10;
							var Tmp11;
								var Tmp12;
									var Tmp15;
							var Tmp16;

		var i_140040 = 0;
		var num_140042 = 0;
		L1: do {
				L2: while (true) {
				if (!(i_140040 < (formatstr_140034 != null ? formatstr_140034.length : 0))) break L2;
					if (((formatstr_140034[i_140040] == 36) && ((i_140040 + 1) < (formatstr_140034 != null ? formatstr_140034.length : 0)))) {
					switch (formatstr_140034[(i_140040 + 1)]) {
					case 35:
						if (((a_140036 != null ? (a_140036.length-1) : -1) < num_140042)) {
						invalid_format_string_140000();
						}
						
						if (s_140033[s_140033_Idx] != null) { s_140033[s_140033_Idx] = (s_140033[s_140033_Idx]).concat(a_140036[num_140042]); } else { s_140033[s_140033_Idx] = a_140036[num_140042].slice(); };
						i_140040 += 2;
						num_140042 += 1;
						break;
					case 36:
						if (s_140033[s_140033_Idx] != null) { addChar(s_140033[s_140033_Idx], 36); } else { s_140033[s_140033_Idx] = [36]; };
						i_140040 += 2;
						break;
					case 49:
					case 50:
					case 51:
					case 52:
					case 53:
					case 54:
					case 55:
					case 56:
					case 57:
					case 45:
						var j_140078 = 0;
						i_140040 += 1;
						var negative_140088 = (formatstr_140034[i_140040] == 45);
						if (negative_140088) {
						i_140040 += 1;
						}
						
						L3: do {
								L4: while (true) {
									if (!(i_140040 < (formatstr_140034 != null ? formatstr_140034.length : 0))) Tmp5 = false; else {										Tmp5 = (ConstSet3[formatstr_140034[i_140040]] != undefined);									}								if (!Tmp5) break L4;
									j_140078 = (((j_140078 * 10) + formatstr_140034[i_140040]) - 48);
									i_140040 += 1;
								}
						} while(false);
						if (!(negative_140088)) {
						Tmp6 = (j_140078 - 1);
						}
						else {
						Tmp6 = ((a_140036 != null ? a_140036.length : 0) - j_140078);
						}
						
						var idx_140134 = Tmp6;
							if ((idx_140134 < 0)) Tmp7 = true; else {								Tmp7 = ((a_140036 != null ? (a_140036.length-1) : -1) < idx_140134);							}						if (Tmp7) {
						invalid_format_string_140000();
						}
						
						if (s_140033[s_140033_Idx] != null) { s_140033[s_140033_Idx] = (s_140033[s_140033_Idx]).concat(a_140036[idx_140134]); } else { s_140033[s_140033_Idx] = a_140036[idx_140134].slice(); };
						break;
					case 123:
						var j_140142 = (i_140040 + 2);
						var k_140144 = 0;
						var negative_140145 = (formatstr_140034[j_140142] == 45);
						if (negative_140145) {
						j_140142 += 1;
						}
						
						var is_number_140156 = 0;
						L8: do {
								L9: while (true) {
								if (!((j_140142 < (formatstr_140034 != null ? formatstr_140034.length : 0)) && !((ConstSet4[formatstr_140034[j_140142]] != undefined)))) break L9;
									if ((ConstSet5[formatstr_140034[j_140142]] != undefined)) {
									k_140144 = (((k_140144 * 10) + formatstr_140034[j_140142]) - 48);
									if ((is_number_140156 == 0)) {
									is_number_140156 = 1;
									}
									
									}
									else {
										is_number_140156 = -1;
									}
									
									j_140142 += 1;
								}
						} while(false);
						if ((is_number_140156 == 1)) {
						if (!(negative_140145)) {
						Tmp10 = (k_140144 - 1);
						}
						else {
						Tmp10 = ((a_140036 != null ? a_140036.length : 0) - k_140144);
						}
						
						var idx_140204 = Tmp10;
							if ((idx_140204 < 0)) Tmp11 = true; else {								Tmp11 = ((a_140036 != null ? (a_140036.length-1) : -1) < idx_140204);							}						if (Tmp11) {
						invalid_format_string_140000();
						}
						
						if (s_140033[s_140033_Idx] != null) { s_140033[s_140033_Idx] = (s_140033[s_140033_Idx]).concat(a_140036[idx_140204]); } else { s_140033[s_140033_Idx] = a_140036[idx_140204].slice(); };
						}
						else {
							var x_140212 = find_normalized_139961(substr_23422(formatstr_140034, (i_140040 + 2), (j_140142 - 1)), a_140036);
								if (!(0 <= x_140212)) Tmp12 = false; else {									Tmp12 = (x_140212 < (a_140036 != null ? (a_140036.length-1) : -1));								}							if (Tmp12) {
							if (s_140033[s_140033_Idx] != null) { s_140033[s_140033_Idx] = (s_140033[s_140033_Idx]).concat(a_140036[(x_140212 + 1)]); } else { s_140033[s_140033_Idx] = a_140036[(x_140212 + 1)].slice(); };
							}
							else {
							invalid_format_string_140000();
							}
							
						}
						
						i_140040 = (j_140142 + 1);
						break;
					case 97:
					case 98:
					case 99:
					case 100:
					case 101:
					case 102:
					case 103:
					case 104:
					case 105:
					case 106:
					case 107:
					case 108:
					case 109:
					case 110:
					case 111:
					case 112:
					case 113:
					case 114:
					case 115:
					case 116:
					case 117:
					case 118:
					case 119:
					case 120:
					case 121:
					case 122:
					case 65:
					case 66:
					case 67:
					case 68:
					case 69:
					case 70:
					case 71:
					case 72:
					case 73:
					case 74:
					case 75:
					case 76:
					case 77:
					case 78:
					case 79:
					case 80:
					case 81:
					case 82:
					case 83:
					case 84:
					case 85:
					case 86:
					case 87:
					case 88:
					case 89:
					case 90:
					case 128:
					case 129:
					case 130:
					case 131:
					case 132:
					case 133:
					case 134:
					case 135:
					case 136:
					case 137:
					case 138:
					case 139:
					case 140:
					case 141:
					case 142:
					case 143:
					case 144:
					case 145:
					case 146:
					case 147:
					case 148:
					case 149:
					case 150:
					case 151:
					case 152:
					case 153:
					case 154:
					case 155:
					case 156:
					case 157:
					case 158:
					case 159:
					case 160:
					case 161:
					case 162:
					case 163:
					case 164:
					case 165:
					case 166:
					case 167:
					case 168:
					case 169:
					case 170:
					case 171:
					case 172:
					case 173:
					case 174:
					case 175:
					case 176:
					case 177:
					case 178:
					case 179:
					case 180:
					case 181:
					case 182:
					case 183:
					case 184:
					case 185:
					case 186:
					case 187:
					case 188:
					case 189:
					case 190:
					case 191:
					case 192:
					case 193:
					case 194:
					case 195:
					case 196:
					case 197:
					case 198:
					case 199:
					case 200:
					case 201:
					case 202:
					case 203:
					case 204:
					case 205:
					case 206:
					case 207:
					case 208:
					case 209:
					case 210:
					case 211:
					case 212:
					case 213:
					case 214:
					case 215:
					case 216:
					case 217:
					case 218:
					case 219:
					case 220:
					case 221:
					case 222:
					case 223:
					case 224:
					case 225:
					case 226:
					case 227:
					case 228:
					case 229:
					case 230:
					case 231:
					case 232:
					case 233:
					case 234:
					case 235:
					case 236:
					case 237:
					case 238:
					case 239:
					case 240:
					case 241:
					case 242:
					case 243:
					case 244:
					case 245:
					case 246:
					case 247:
					case 248:
					case 249:
					case 250:
					case 251:
					case 252:
					case 253:
					case 254:
					case 255:
					case 95:
						var j_140221 = (i_140040 + 1);
						L13: do {
								L14: while (true) {
									if (!(j_140221 < (formatstr_140034 != null ? formatstr_140034.length : 0))) Tmp15 = false; else {										Tmp15 = (ConstSet7[formatstr_140034[j_140221]] != undefined);									}								if (!Tmp15) break L14;
									j_140221 += 1;
								}
						} while(false);
						var x_140240 = find_normalized_139961(substr_23422(formatstr_140034, (i_140040 + 1), (j_140221 - 1)), a_140036);
							if (!(0 <= x_140240)) Tmp16 = false; else {								Tmp16 = (x_140240 < (a_140036 != null ? (a_140036.length-1) : -1));							}						if (Tmp16) {
						if (s_140033[s_140033_Idx] != null) { s_140033[s_140033_Idx] = (s_140033[s_140033_Idx]).concat(a_140036[(x_140240 + 1)]); } else { s_140033[s_140033_Idx] = a_140036[(x_140240 + 1)].slice(); };
						}
						else {
						invalid_format_string_140000();
						}
						
						i_140040 = j_140221;
						break;
					default: 
						invalid_format_string_140000();
						break;
					}
					}
					else {
						if (s_140033[s_140033_Idx] != null) { addChar(s_140033[s_140033_Idx], formatstr_140034[i_140040]); } else { s_140033[s_140033_Idx] = [formatstr_140034[i_140040]]; };
						i_140040 += 1;
					}
					
				}
		} while(false);

	
}

function nsuFormatOpenArray(formatstr_140277, a_140279) {
	var result_140280 = [null];

		result_140280[0] = nimCopy(null, mnewString(0), NTI138);
		nsuAddf(result_140280, 0, formatstr_140277, a_140279);

	return result_140280[0];

}

function is_undefined_18485(x_18489) {
	var result_18490 = false;

	var F={procname:"isUndefined.isUndefined",prev:framePtr,filename:"..\\..\\Software\\nim\\lib\\system\\reprjs.nim",line:0};
	framePtr = F;
		F.line = 34;
		result_18490 = x_18489 === undefined;
	framePtr = F.prev;

	return result_18490;

}

function add_quoted_187202(s_187206, s_187206_Idx, x_187208) {
	var F={procname:"addQuoted.addQuoted",prev:framePtr,filename:"..\\..\\Software\\nim\\lib\\system.nim",line:0};
	framePtr = F;
		F.line = 4108;
		if (s_187206[s_187206_Idx] != null) { s_187206[s_187206_Idx] = (s_187206[s_187206_Idx]).concat(reprEnum(x_187208, NTI158202)); } else { s_187206[s_187206_Idx] = reprEnum(x_187208, NTI158202).slice(); };
	framePtr = F.prev;

	
}

function collection_to_string_187047(x_187051, prefix_187053, separator_187055, suffix_187057) {
	var result_187058 = [null];

	var F={procname:"collectionToString.collectionToString",prev:framePtr,filename:"..\\..\\Software\\nim\\lib\\system.nim",line:0};
	framePtr = F;
		F.line = 2629;
		result_187058[0] = nimCopy(null, prefix_187053, NTI138);
		F.line = 2630;
		var first_element_187059 = true;
		L1: do {
			F.line = 2631;
			var value_187122 = 0;
			F.line = 2279;
			var i_187424 = 0;
			L2: do {
				F.line = 2280;
					L3: while (true) {
					if (!(i_187424 <= 6)) break L3;
						if ((x_187051[chckRange(i_187424, 0, 6)] != undefined)) {
						F.line = 2281;
						value_187122 = chckRange(i_187424, 0, 6);
						if (first_element_187059) {
						F.line = 2633;
						first_element_187059 = false;
						}
						else {
							F.line = 2635;
						if (result_187058[0] != null) { result_187058[0] = (result_187058[0]).concat(separator_187055); } else { result_187058[0] = separator_187055.slice(); };
						}
						
						F.line = 2644;
						add_quoted_187202(result_187058, 0, value_187122);
						}
						
						F.line = 2282;
						i_187424 = addInt(i_187424, 1);
					}
			} while(false);
		} while(false);
		F.line = 2646;
		if (result_187058[0] != null) { result_187058[0] = (result_187058[0]).concat(suffix_187057); } else { result_187058[0] = suffix_187057.slice(); };
	framePtr = F.prev;

	return result_187058[0];

}

function HEX24_187039(x_187044) {
	var result_187045 = null;

	var F={procname:"$.$",prev:framePtr,filename:"..\\..\\Software\\nim\\lib\\system.nim",line:0};
	framePtr = F;
		F.line = 2649;
		result_187045 = nimCopy(null, collection_to_string_187047(x_187044, makeNimstrLit("{"), makeNimstrLit(", "), makeNimstrLit("}")), NTI138);
	framePtr = F.prev;

	return result_187045;

}
var temp_187023 = new_jint_158321(123);
if (!((ConstSet1[temp_187023.kind] != undefined))) {
var msg_187459 = nsuFormatOpenArray(makeNimstrLit("Incorrect JSON kind. Wanted \'$1\' in \'$2\' but got \'$3\'."), [HEX24_187039(ConstSet8), makeNimstrLit("temp187018"), reprEnum(temp_187023.kind, NTI158202)]);
var e_187465 = [null];
e_187465[0] = {m_type: NTI156039, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
e_187465[0].message = nimCopy(null, msg_187459, NTI138);
e_187465[0].parent = null;
raiseException(e_187465[0], "JsonKindError");
}

rawEcho(cstrToNimstr(((temp_187023.num + 1))+""));
